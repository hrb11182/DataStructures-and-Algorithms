/*
You are given a string s consisting only of letters 'a' and 'b'. In a single step you can remove one palindromic subsequence from s.

Return the minimum number of steps to make the given string empty.

A string is a subsequence of a given string if it is generated by deleting some characters of a given string without changing its order. Note that a subsequence does not necessarily need to be contiguous.

A string is called palindrome if is one that reads the same backward as well as forward.

 

Example 1:

Input: s = "ababa"
Output: 1
Explanation: s is already a palindrome, so its entirety can be removed in a single step.
Example 2:

Input: s = "abb"
Output: 2
Explanation: "abb" -> "bb" -> "". 
Remove palindromic subsequence "a" then "bb".
Example 3:

Input: s = "baabb"
Output: 2
Explanation: "baabb" -> "b" -> "". 
Remove palindromic subsequence "baab" then "b".
 

Constraints:

1 <= s.length <= 1000
s[i] is either 'a' or 'b'.

*/


class Solution {
public:
    int removePalindromeSub(string s) {
        if(s.size()==0)return 0;
// If string is empty.
        int i=0;
        int j = s.size()-1;
// Taken two pointers pointing on the first and the last element of the array.
        while(i<j){
        	if(s[i]==s[j]){
        		i++;
        		j--;
        	}
// while loop will keep going untill j crosses i and we keep on checking both the values in order to confirm that they are pallindromic or not.
        	else return 2;
// Here if the string is not pallindromic and we all know that it contains 'a' and'b' only so we can remove both in 2 times. 
        }
        return 1;
// If pallindromic we can remove them in one go.
    }
};